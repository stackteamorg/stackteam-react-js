{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  return (__assign = Object.assign || function (t) {\n    for (var i, n = 1, a = arguments.length; n < a; n++) {\n      for (var s in i = arguments[n]) {\n        Object.prototype.hasOwnProperty.call(i, s) && (t[s] = i[s]);\n      }\n    }\n\n    return t;\n  }).apply(this, arguments);\n},\n    CountUp = function () {\n  function t(t, i, n) {\n    var a = this;\n    this.endVal = i, this.options = n, this.version = \"2.2.0\", this.defaults = {\n      startVal: 0,\n      decimalPlaces: 0,\n      duration: 2,\n      useEasing: !0,\n      useGrouping: !0,\n      smartEasingThreshold: 999,\n      smartEasingAmount: 333,\n      separator: \",\",\n      decimal: \".\",\n      prefix: \"\",\n      suffix: \"\",\n      enableScrollSpy: !1,\n      scrollSpyDelay: 200,\n      scrollSpyOnce: !1\n    }, this.finalEndVal = null, this.useEasing = !0, this.countDown = !1, this.error = \"\", this.startVal = 0, this.paused = !0, this.once = !1, this.count = function (t) {\n      a.startTime || (a.startTime = t);\n      var i = t - a.startTime;\n      a.remaining = a.duration - i, a.useEasing ? a.countDown ? a.frameVal = a.startVal - a.easingFn(i, 0, a.startVal - a.endVal, a.duration) : a.frameVal = a.easingFn(i, a.startVal, a.endVal - a.startVal, a.duration) : a.countDown ? a.frameVal = a.startVal - (a.startVal - a.endVal) * (i / a.duration) : a.frameVal = a.startVal + (a.endVal - a.startVal) * (i / a.duration), a.countDown ? a.frameVal = a.frameVal < a.endVal ? a.endVal : a.frameVal : a.frameVal = a.frameVal > a.endVal ? a.endVal : a.frameVal, a.frameVal = Number(a.frameVal.toFixed(a.options.decimalPlaces)), a.printValue(a.frameVal), i < a.duration ? a.rAF = requestAnimationFrame(a.count) : null !== a.finalEndVal ? a.update(a.finalEndVal) : a.callback && a.callback();\n    }, this.formatNumber = function (t) {\n      var i,\n          n,\n          s,\n          e,\n          r = t < 0 ? \"-\" : \"\";\n      i = Math.abs(t).toFixed(a.options.decimalPlaces);\n      var o = (i += \"\").split(\".\");\n\n      if (n = o[0], s = o.length > 1 ? a.options.decimal + o[1] : \"\", a.options.useGrouping) {\n        e = \"\";\n\n        for (var l = 0, h = n.length; l < h; ++l) {\n          0 !== l && l % 3 == 0 && (e = a.options.separator + e), e = n[h - l - 1] + e;\n        }\n\n        n = e;\n      }\n\n      return a.options.numerals && a.options.numerals.length && (n = n.replace(/[0-9]/g, function (t) {\n        return a.options.numerals[+t];\n      }), s = s.replace(/[0-9]/g, function (t) {\n        return a.options.numerals[+t];\n      })), r + a.options.prefix + n + s + a.options.suffix;\n    }, this.easeOutExpo = function (t, i, n, a) {\n      return n * (1 - Math.pow(2, -10 * t / a)) * 1024 / 1023 + i;\n    }, this.options = __assign(__assign({}, this.defaults), n), this.formattingFn = this.options.formattingFn ? this.options.formattingFn : this.formatNumber, this.easingFn = this.options.easingFn ? this.options.easingFn : this.easeOutExpo, this.startVal = this.validateValue(this.options.startVal), this.frameVal = this.startVal, this.endVal = this.validateValue(i), this.options.decimalPlaces = Math.max(this.options.decimalPlaces), this.resetDuration(), this.options.separator = String(this.options.separator), this.useEasing = this.options.useEasing, \"\" === this.options.separator && (this.options.useGrouping = !1), this.el = \"string\" == typeof t ? document.getElementById(t) : t, this.el ? this.printValue(this.startVal) : this.error = \"[CountUp] target is null or undefined\", void 0 !== window && this.options.enableScrollSpy && (this.error ? console.error(this.error, t) : (window.onScrollFns = window.onScrollFns || [], window.onScrollFns.push(function () {\n      return a.handleScroll(a);\n    }), window.onscroll = function () {\n      window.onScrollFns.forEach(function (t) {\n        return t();\n      });\n    }, this.handleScroll(this)));\n  }\n\n  return t.prototype.handleScroll = function (t) {\n    if (t && window && !t.once) {\n      var i = window.innerHeight + window.scrollY,\n          n = t.el.offsetTop + t.el.offsetHeight;\n      n < i && n > window.scrollY && t.paused ? (t.paused = !1, setTimeout(function () {\n        return t.start();\n      }, t.options.scrollSpyDelay), t.options.scrollSpyOnce && (t.once = !0)) : window.scrollY > n && !t.paused && t.reset();\n    }\n  }, t.prototype.determineDirectionAndSmartEasing = function () {\n    var t = this.finalEndVal ? this.finalEndVal : this.endVal;\n    this.countDown = this.startVal > t;\n    var i = t - this.startVal;\n\n    if (Math.abs(i) > this.options.smartEasingThreshold) {\n      this.finalEndVal = t;\n      var n = this.countDown ? 1 : -1;\n      this.endVal = t + n * this.options.smartEasingAmount, this.duration = this.duration / 2;\n    } else this.endVal = t, this.finalEndVal = null;\n\n    this.finalEndVal ? this.useEasing = !1 : this.useEasing = this.options.useEasing;\n  }, t.prototype.start = function (t) {\n    this.error || (this.callback = t, this.duration > 0 ? (this.determineDirectionAndSmartEasing(), this.paused = !1, this.rAF = requestAnimationFrame(this.count)) : this.printValue(this.endVal));\n  }, t.prototype.pauseResume = function () {\n    this.paused ? (this.startTime = null, this.duration = this.remaining, this.startVal = this.frameVal, this.determineDirectionAndSmartEasing(), this.rAF = requestAnimationFrame(this.count)) : cancelAnimationFrame(this.rAF), this.paused = !this.paused;\n  }, t.prototype.reset = function () {\n    cancelAnimationFrame(this.rAF), this.paused = !0, this.resetDuration(), this.startVal = this.validateValue(this.options.startVal), this.frameVal = this.startVal, this.printValue(this.startVal);\n  }, t.prototype.update = function (t) {\n    cancelAnimationFrame(this.rAF), this.startTime = null, this.endVal = this.validateValue(t), this.endVal !== this.frameVal && (this.startVal = this.frameVal, this.finalEndVal || this.resetDuration(), this.finalEndVal = null, this.determineDirectionAndSmartEasing(), this.rAF = requestAnimationFrame(this.count));\n  }, t.prototype.printValue = function (t) {\n    var i = this.formattingFn(t);\n    \"INPUT\" === this.el.tagName ? this.el.value = i : \"text\" === this.el.tagName || \"tspan\" === this.el.tagName ? this.el.textContent = i : this.el.innerHTML = i;\n  }, t.prototype.ensureNumber = function (t) {\n    return \"number\" == typeof t && !isNaN(t);\n  }, t.prototype.validateValue = function (t) {\n    var i = Number(t);\n    return this.ensureNumber(i) ? i : (this.error = \"[CountUp] invalid start or end value: \".concat(t), null);\n  }, t.prototype.resetDuration = function () {\n    this.startTime = null, this.duration = 1e3 * Number(this.options.duration), this.remaining = this.duration;\n  }, t;\n}();\n\nexport { CountUp };","map":null,"metadata":{},"sourceType":"module"}